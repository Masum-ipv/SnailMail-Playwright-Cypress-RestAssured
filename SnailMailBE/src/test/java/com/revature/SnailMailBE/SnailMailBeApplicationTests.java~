package com.revature.SnailMailBE;

import com.revature.SnailMailBE.controllers.MailController;
import com.revature.SnailMailBE.models.Mail;
import com.revature.SnailMailBE.services.MailService;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
class SnailMailBeApplicationTests {

    @Test
    void changePassword() {
        String payload = """
                {
                	"oldPassword": "password",
                	"newPassword": "newPassword"
                }
                """;
        given().filter(new RequestLoggingFilter()) //Log the request
                .filter(new ResponseLoggingFilter()) //Log the response
                .baseUri("http://localhost:8080").header("Content-Type", "application/json").body(payload).when().patch("/user/password").then().statusCode(200);
    }

    @Test
    void changePasswordFail() {
        String payload = """
                {
                	"oldPassword": "wrong password",
                	"newPassword": "newPassword"
                }
                """;
        given().filter(new RequestLoggingFilter()) //Log the request
                .filter(new ResponseLoggingFilter()) //Log the response
                .baseUri("http://localhost:8080").header("Content-Type", "application/json").body(payload).when().patch("/user/password").then().statusCode(400);
    }

    @Test
    void loginFail() {
        String payload = """
                {
                	"username": "wrong email",
                	"password": "wrong password",
                	"role": "user",
                	"email": "wrong email"
                }
                """;
        given().filter(new RequestLoggingFilter()) //Log the request
                .filter(new ResponseLoggingFilter()) //Log the response
                .baseUri("http://localhost:8080").header("Content-Type", "application/json").body(payload).when().post("/auth/login").then().statusCode(401);
    }

    @Test
    void loginSuccess() {
        String payload = """
                {
                	"username": "username",
                	"password": "password",
                	"role": "user",
                	"email": "email@snailmail.com"
                }
                """;
        given().filter(new RequestLoggingFilter()) //Log the request
                .filter(new ResponseLoggingFilter()) //Log the response
                .baseUri("http://localhost:8080").header("Content-Type", "application/json").body(payload).when().post("/auth/login").then().statusCode(200);
    }

    @MockitoBean
    private MailService mailService;

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper; // It's often convenient to autowire ObjectMapper

    @Test
    void sendMailWithMock() throws Exception {
        Mail mail = new Mail("email@snailmail.com", "fakhrul@snailmail.com", "subject", "body");

        // Set up the mock behavior
        when(mailService.sendMail(any(Mail.class))).thenReturn(mail);

        mockMvc.perform(post("/mail")
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mail)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.sender", is(mail.getRecipient())))
                .andExpect(jsonPath("$.recipient", is(mail.getRecipient())))
                .andExpect(jsonPath("$.subject", is(mail.getSubject())))
                .andExpect(jsonPath("$.body", is(mail.getBody())));
    }


}
